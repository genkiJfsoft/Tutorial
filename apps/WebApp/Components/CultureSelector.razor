@using System.Globalization
@using Microsoft.Extensions.Options
@using ExpenseTracker.WebApp.Components
@using ExpenseTracker.WebApp.Resources
@inject NavigationManager NavigationManager
@inject IOptions<RequestLocalizationOptions> RequestLocalizationOptions
@inject IStringLocalizer<Resources.Strings> L

<Dropdown Class="custom-dropdown">
    <DropdownToggleButton Class="btn-custom" > 
        @L[SelectedCulture.Name]
    </DropdownToggleButton>
    <DropdownMenu Position="DropdownMenuPosition.End" Class="custom-menu">
        @if (SupportedCultures is not null)
        {
            @foreach (var culture in SupportedCultures)
            {
                <DropdownItem Class="custom-item" Active="@(culture.Name == SelectedCulture.Name)" @onclick="() => ChangeCultureAsync(culture)">@culture.NativeName</DropdownItem>
            }
        }
    </DropdownMenu>
</Dropdown> 
 

@code {
    public CultureInfo SelectedCulture { get; set; } = Localizations.DefaultCulture;

    public List<CultureInfo>? SupportedCultures { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        SupportedCultures = RequestLocalizationOptions.Value.SupportedCultures?.ToList();
        SelectedCulture = CultureInfo.CurrentCulture;
        return Task.CompletedTask;
    }

    public async Task ChangeCultureAsync(CultureInfo culture)
    {
        if (SelectedCulture.Name != culture.Name)
        {
            var id = Uri.EscapeDataString(culture.Name);
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

            NavigationManager.NavigateTo($"Culture?id={id}&returnUrl={returnUrl}", forceLoad: true);
        }
        await Task.CompletedTask;
    }

    private string GetNativeName(CultureInfo culture)
    {
        // Use fixed "English" for the English culture, otherwise use NativeName
        return culture.Name switch
        {
            "en" => "English",
            _ => culture.NativeName
        };
    }
}
