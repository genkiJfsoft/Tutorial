@using System.ComponentModel.DataAnnotations
@using Ardalis.Result

@attribute [Route(Route)]

@inject IdentityRedirectManager RedirectManager

<div class="col-lg-6 mx-auto">
    <div class="card">
        <div class="card-header">
            Login
        </div>
        <div class="card-body">
            <StatusMessage Message="@_errorMessage" />
            
            <EditForm Model="Input" method="POST" OnValidSubmit="LoginUser" FormName="Login">
                <DataAnnotationsValidator/>

                <div class="mb-2">
                    <label class="visually-hidden" for="username">Username</label>
                    <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username"
                               aria-required="true" placeholder="Enter your username..."/>
                    <ValidationMessage For="() => Input.UserName"/>
                </div>

                <div class="mb-3">
                    <label class="visually-hidden" for="password">Password</label>
                    <InputText @bind-Value="Input.Password" type="password" class="form-control"
                               autocomplete="current-password" aria-required="true" placeholder="Enter your password..."/>
                    <ValidationMessage For="() => Input.Password"/>
                </div>

                <div class="form-check mb-4">
                    <InputCheckbox @bind-Value="Input.RememberMe" id="remember" class="form-check-input"/>
                    <label class="form-check-label" for="remember">
                        Remember me
                    </label>
                </div>

                <button class="btn btn-secondary w-100" type="submit">Sign in</button>
            </EditForm>
        </div>
    </div>
</div>

<h1>Member Portal</h1>



<form>
    <!-- Email Input -->
    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Email: <span class="text-danger">*</span></label>
        <div class="col-sm-4">
            <input type="email" class="form-control" id="inputEmail" placeholder="Enter your email">
        </div>
    </div>

    <!-- Password Input -->
    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Password: <span class="text-danger">*</span></label>
        <div class="col-sm-4">
            <input type="password" class="form-control" id="inputPassword" placeholder="Enter your password">
        </div>
    </div>

    <!-- Language Dropdown -->
    <div class="form-group row mb-3">
        <label class="col-sm-2 col-form-label">Language</label>
        <div class="col-sm-4">
            <Dropdown>
                <DropdownToggleButton>English</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem To="#" Type="DropdownItemType.Link" Active="true">English</DropdownItem>
                    <DropdownItem To="#" Type="DropdownItemType.Link">Chinese</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>
    </div>

    <Button Color="ButtonColor.Light"> Login </Button>
</form>



@code {
    public const string Route = "/Login";
    
    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await Mediator.Send(new SignIn(Input.UserName, Input.Password, Input.RememberMe));

        // TODO: handle LoginWith2fa

        if (result.IsSuccess)
        {
            RedirectManager.RedirectTo(ReturnUrl ?? Portal.DashboardPage.Route);
        }
        else if (result.IsForbidden())
        {
            RedirectManager.RedirectTo(LockoutPage.Route);
        }
        else
        {
            _errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Please enter your username")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Please enter your password")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}