@using System.ComponentModel.DataAnnotations
@using Ardalis.Result
@using System.Net.Mail
@using System.Net
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Route(Route)]
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager
@inject IJSRuntime JSRuntime


<h1 class="memberPortal text-center" style="margin-bottom:5%">@L["Forget Password"]</h1>

<div class="d-flex justify-content-center align-items-center">
    <div style="width:50%">
        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <div class="alert alert-success" role="alert">
                @_successMessage
            </div>
        }
        <StatusMessage Message="@_errorMessage" />

        <EditForm Model="Input" method="POST" OnValidSubmit="RetrievePassword" FormName="RetrievePasswordForm">
            <DataAnnotationsValidator />

            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Email"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email"
                           aria-required="true" placeholder="Enter your email..." />
            </div>
            <ValidationMessage For="() => Input.Email" />

                    <div style="display: flex; justify-content: space-between; align-items: center;">
                 <a href="/Login" class="btn btn-light" style="margin-left:25%">@L["Back"]</a>
                 <button type="submit" class="btn btn-light">@L["Retrieve Password"]</button>               
             </div>


        </EditForm>
    </div>
   

</div>

@code {
    protected override void OnInitialized()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null && httpContext.Request.Cookies.TryGetValue(".AspNetCore.Culture", out var savedLanguage))
        {
            // Extract the language from the cookie (e.g., "c=en|uic=en" -> "en")
            currentCulture = ExtractLanguageFromCookie(savedLanguage);
            CultureInfo.CurrentCulture = new CultureInfo(currentCulture);
            CultureInfo.CurrentUICulture = new CultureInfo(currentCulture);
            Console.WriteLine($"Loaded language from cookie: {currentCulture}");
        }
        else
        {
            currentCulture = "en"; // Default to English if no cookie is found
            Console.WriteLine("No .AspNetCore.Culture cookie found. Defaulting to English.");
        }
    }

    public const string Route = "/ForgetPassword";
    private string? _successMessage; // For displaying a success message
    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private void SendResetPasswordEmail(string toEmail, string userName, string language)
    {
        string fromEmail = "admin@jfsoft.com"; // Mailpit doesn't require a real email address
        string fromPassword = ""; // No password required
        string smtpHost = "localhost"; // Mailpit runs on localhost
        int smtpPort = 1025; // Default SMTP port for Mailpit

        string loginUrl = NavigationManager.BaseUri.TrimEnd('/') + "/Login"; // URL to login page
        string subject, body;

        if (language == "zh")
        {
            subject = "密码重置请求";
            body = $@"
               <p>亲爱的 {userName},</p>
               <p style='margin-left: 5%;'>请使用以下密码登录网站：</p>
               <p style='margin-left: 10%; font-size: 24px; font-weight: bold;'><strong>Abc@123</strong></p>
               <p style='margin-left: 5%;'><a href='{loginUrl}'>点击这里</a> 登录。</p>
               <p>此致,<br>管理员</p>
            ";
        }
        else
        {
            subject = "Password Reset Request";
            body = $@"
               <p>Dear {userName},</p>
               <p style='margin-left: 5%;'>Please login to the website with your current new password:</p>
               <p style='margin-left: 10%; font-size: 24px; font-weight: bold;'><strong>Abc@123</strong></p>
               <p style='margin-left: 5%;'><a href='{loginUrl}'>Click Here</a> to login.</p>
               <p>Regards,<br>Administrator</p>
            ";
        }

        using var smtpClient = new SmtpClient(smtpHost, smtpPort)
            {
                Credentials = new NetworkCredential(fromEmail, fromPassword),
                EnableSsl = false
            };

        using var mailMessage = new MailMessage(fromEmail, toEmail, subject, body)
            {
                IsBodyHtml = true
            };

        smtpClient.Send(mailMessage);
    }

    private async Task RetrievePassword()
    {
        Console.WriteLine($"DEBUG: Input.Email = {Input.Email}");

        if (string.IsNullOrEmpty(Input.Email))
        {
            _errorMessage = "Email is required.";
            return;
        }

        try
        {
            // Find user by email
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                _errorMessage = "Error: Email not found.";
                return;
            }

            // Ensure email and username are not null
            if (string.IsNullOrEmpty(user.Email) || string.IsNullOrEmpty(user.UserName))
            {
                _errorMessage = "Error: User email or username is invalid.";
                return;
            }

            // Retrieve preferred language from cookies
            var httpContext = HttpContextAccessor.HttpContext;
            var preferredLanguage = "en"; // Default to English
            if (httpContext != null && httpContext.Request.Cookies.TryGetValue(".AspNetCore.Culture", out var savedLanguage))
            {
                preferredLanguage = ExtractLanguageFromCookie(savedLanguage);
                Console.WriteLine($"Using preferred language from cookie: {preferredLanguage}");
            }

            // Reset password to "Abc@123"
            var resetToken = await UserManager.GeneratePasswordResetTokenAsync(user);
            var resetResult = await UserManager.ResetPasswordAsync(user, resetToken, "Abc@123");

            if (!resetResult.Succeeded)
            {
                _errorMessage = "Error: Unable to reset password.";
                return;
            }

            // Send reset password email
            SendResetPasswordEmail(user.Email, user.UserName, preferredLanguage);

            // Set success message
            _successMessage = "Password reset successfully. Check your email for further instructions.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
        }
    }

    private string ExtractLanguageFromCookie(string cookieValue)
    {
        // Extract the language from the cookie (e.g., "c=en|uic=en" -> "en")
        return Uri.UnescapeDataString(cookieValue).Split('|').FirstOrDefault()?.Replace("c=", "") ?? "en";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Please enter your email")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";
    }

    protected string currentCulture { get; set; } = "en";
}

