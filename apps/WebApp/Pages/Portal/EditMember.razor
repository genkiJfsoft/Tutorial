@page "/EditMember/{userId}"

@using System.ComponentModel.DataAnnotations
@using ExpenseTracker.Core.Domain.Authorization




<h3 style="margin-left:2%">@L["Edit Member"]</h3>
<div class="d-flex justify-content-start ">
    <div style="width:50%; margin-left:5%;">
        <EditForm Model="Edit" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <!-- Username -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Username"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Edit.Username" class="form-control" autocomplete="username"  disabled />
            </div>
            <ValidationMessage For="() => Edit.Username" />

            <!-- Full Name -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Full Name"] : <span class="text-danger">*</span></label>
                <InputText @bind-Value="Edit.FullName" class="form-control" placeholder=@L["Enter your full name"] />
            </div>
            <ValidationMessage For="() => Edit.FullName" class="text-danger " style="margin-left:25% " />


            <!-- Email -->
            <div class="mt-3 mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Email"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Edit.Email" type="email" class="form-control"  disabled />
            </div>

            <!-- Mobile No -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label"> @L["Mobile No"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Edit.MobileNo" class="form-control" placeholder=@L["Enter your mobile number"] />
            </div>
            <ValidationMessage For="() => Edit.MobileNo" class="text-danger " style="margin-left:25% " />

            <!-- Category -->
            <div class="form-group row align-items-center">
                <label class="col-md-3 col-form-label">@L["Category"]: <span class="text-danger">*</span></label>
                <div class="col-md-9 d-flex">
                    <div class="form-check me-4">
                        <input type="radio" id="merchant" name="category" value="Merchant"
                        class="form-check-input"
                        checked="@((Edit.Category ?? "") == "Merchant")"
                        @onclick='() => Edit.Category = "Merchant"' />
                        <label for="merchant" class="form-check-label">@L["Merchant"]</label>
                    </div>

                    <div class="form-check">
                        <input type="radio" id="normalMember" name="category" value="Normal Member"
                        class="form-check-input"
                        checked="@((Edit.Category ?? "") == "Normal Member")"
                        @onclick='() => Edit.Category = "Normal Member"' />
                        <label for="normalMember" class="form-check-label">@L["Normal Member"]</label>
                    </div>
                </div>
            </div>

            <!-- Country Dropdown -->
            <div class="form-group row mb-3">
                <label class="col-md-3 col-form-label" for="countryDropdown">@L["Country"]: <span class="text-danger">*</span></label>
                <div class="col-sm-9 mt-1">
                    <select id="countryDropdown" class="form-control" @bind="Edit.Country">
                        @foreach (var country in Countries)
                        {
                            <option value="@country">@country</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Buttons -->
            <div class="d-flex justify-content-between">
                <button class="btn btn-secondary" type="button" @onclick="CancelEdit">@L["Cancel"]</button>
                <button class="btn btn-primary" type="submit">@L["Update"]</button>
            </div>
        </EditForm>
    </div>
</div>

@code {







    [Parameter]
    public string userId { get; set; } = string.Empty;

    private EditMemberModel Edit { get; set; } = new();


    private List<string> Countries = new List<string>();

    private void InitializeCountries()
    {
        Countries = new List<string>
        {
            L["USA"],
            L["Malaysia"],
            L["China"],
            L["India"],
            L["United Kingdom"],
            L["Canada"],
            L["Australia"],
            L["France"],
            L["Germany"],
            L["Japan"],
        };
    }
    protected override async Task OnInitializedAsync()
    {
        InitializeCountries();
        if (!string.IsNullOrEmpty(userId))
        {
            var user = await UserService.GetUserByIdAsync(userId);
            if (user != null)
            {
                Edit = new EditMemberModel
                    {
                        Username = user.UserName ?? string.Empty,
                        FullName = user.FullName ?? string.Empty,
                        Email = user.Email ?? string.Empty,
                        MobileNo = user.MobileNo ?? string.Empty,
                        Category = user.Category ?? "Normal Member",
                        Country = user.Country ?? @L["USA"],
                    };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Fetch the tracked user from the database
            var user = await UserService.GetUserByIdAsync(userId);
            if (user == null)
            {
                Console.WriteLine("User not found.");
                return;
            }

            // Update the existing user's properties
            user.UserName = Edit.Username;
            user.FullName = Edit.FullName;
            user.Email = Edit.Email;
            user.MobileNo = Edit.MobileNo;
            user.Category = Edit.Category;
            user.Country = Edit.Country;

            // Ensure SecurityStamp is set
            user.SecurityStamp ??= Guid.NewGuid().ToString();
            // Save the changes
            var result = await UserService.UpdateUserAsync(user);

            if (result)
            {
                Console.WriteLine("User updated successfully.");
                Console.WriteLine($"Category value before saving: {user.Category}");

                NavigationManager.NavigateTo("/MemberList");
                ToastService.Notify(new(ToastType.Success, $"✨{user.UserName}✨ {L["Edited"]} 🖊️"));


            }
        
            
            else
            {
                Console.WriteLine("Failed to update user.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }


    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/memberlist");
    }

    public class EditMemberModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "FullNameRequired")]
        public string FullName { get; set; } = "";

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "MobileNoRequired")]
        [Phone(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "InvalidMobileNo")]
        public string MobileNo { get; set; } = "";

        [Required(ErrorMessage = "Category is required.")]
        public string Category { get; set; } = "Normal Member";

        [Required(ErrorMessage = "Country is required.")]
        public string Country { get; set; } = string.Empty;


    }
}
