@page "/AddNewMember"

@using System.ComponentModel.DataAnnotations
@using ExpenseTracker.Core.Domain.Authorization
@using ExpenseTracker.Extensions.Common
@inject NavigationManager Nav
@inject UserService UserService

<h3 style="margin-left:2%">@L["Add New Member"]</h3>
<div class="d-flex justify-content-start">
    <div style="width:50%; margin-left:5%;">

        <EditForm Model="Input" OnValidSubmit="AddMember">
            <DataAnnotationsValidator />

            <!-- Username -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Username"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.Username" class="form-control" placeholder="Enter your username..." />
            </div>
            <ValidationMessage For="() => Input.Username" />

            <!-- Full Name -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Full Name"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.FullName" class="form-control" placeholder="Enter your full name..." />
            </div>
            <ValidationMessage For="() => Input.FullName" />

            <!-- Email -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Email"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.Email" type="email" class="form-control" placeholder="Enter your email..." />
            </div>
            <ValidationMessage For="() => Input.Email" />

            <!-- Mobile No -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Mobile No"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.MobileNo" class="form-control" placeholder="Enter your mobile number..." />
            </div>
            <ValidationMessage For="() => Input.MobileNo" />

            <!-- Category -->
            <div class="form-group row align-items-center">
                <label class="col-md-3 col-form-label">@L["Category"]: <span class="text-danger">*</span></label>
                <div class="col-md-9 d-flex">
                    <div class="form-check me-4">
                        <input type="radio" id="merchant" name="category" value="Merchant"
                        class="form-check-input"
                        checked="@((Input.Category ?? "") == "Merchant")"
                        @onclick='() => Input.Category = "Merchant"' />
                        <label for="merchant" class="form-check-label">Merchant</label>
                    </div>

                    <div class="form-check">
                        <input type="radio" id="normalMember" name="category" value="Normal Member"
                        class="form-check-input"
                        checked="@((Input.Category ?? "") == "Normal Member")"
                        @onclick='() => Input.Category = "Normal Member"' />
                        <label for="normalMember" class="form-check-label">Normal Member</label>
                    </div>
                </div>
            </div>







            <!-- Country Dropdown -->
            <div class="form-group row mb-3">
                <label class="col-md-3 col-form-label" for="countryDropdown">@L["Country"]: <span class="text-danger">*</span></label>
                <div class="col-sm-9 mt-1">
                    <select id="countryDropdown" class="form-control" @bind="Input.Country">
                        @foreach (var country in Countries)
                        {
                            <option value="@country">@country</option>
                        }
                    </select>
                </div>
            </div>
            <ValidationMessage For="() => Input.Country" />

            <!-- Password -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Password"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.Password" type="password" class="form-control"
                placeholder="Enter your password..." />
            </div>
            <ValidationMessage For="() => Input.Password" />

            <!-- Verify Password -->
            <div class="mb-3 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Verify Password"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.VerifyPassword" type="password" class="form-control"
                placeholder="Verify your password..." />
            </div>
            <ValidationMessage For="() => Input.VerifyPassword" />

            <!-- Buttons -->
            <div class="d-flex justify-content-between">
                <button class="btn btn-secondary" type="button" @onclick="Cancel">@L["Cancel"]</button>
                <button class="btn btn-primary" type="submit">@L["Add New Member"]</button>
            </div>
        </EditForm>
    </div>
</div>

@* <div class="d-flex justify-content-between">
    <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
    <button class="btn btn-info" type="button" @onclick="GenerateSampleData">Generate Sample Data</button>
    <button class="btn btn-primary" type="submit">Add New Member</button>
</div> *@

@code {
    private InputModel Input { get; set; } = new();

    private List<string> Countries = new()
    {
        "USA", "Malaysia", "China", "India", "United Kingdom", "Canada", "Australia", "France", "Germany", "Japan"
    };

    private async Task AddMember()
    {
        try
        {
            var newUser = new User
                {
                    UserName = Input.Username,
                    FullName = Input.FullName,
                    Email = Input.Email,
                    MobileNo = Input.MobileNo,
                    Category = Input.Category,
                    Country = Input.Country,
                    PasswordHash = Input.Password,
                    Status = "Active"
                };

            var result = await UserService.CreateUserAsync(newUser, Input.Password);

            if (result)
            {
                Console.WriteLine("New member added successfully.");
                Nav.NavigateTo("/MemberList?message=Add%20Member%20Successful");
            }
            else
            {
                Console.WriteLine("Failed to add new member. Service returned an error.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while adding member: {ex.Message}");
        }

        }
    private void Cancel()
    {
        Nav.NavigateTo("/MemberList");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Please enter your username")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your full name")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your email")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your mobile number")]
        [Phone(ErrorMessage = "Invalid phone number format")]
        public string MobileNo { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please select a category")]
        public string Category { get; set; } = "Normal Member";

        [Required(ErrorMessage = "Please select a country")]
        public string Country { get; set; } = "USA";

        [Required(ErrorMessage = "Please enter your password")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please verify your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        [DataType(DataType.Password)]
        public string VerifyPassword { get; set; } = string.Empty;
    }

    private void GenerateSampleData()
    {
        Input.Username = $"User{new Random().Next(1000, 9999)}";
        Input.FullName = "John Doe";
        Input.Email = $"john.doe{new Random().Next(1, 100)}@example.com";
        Input.MobileNo = $"012345678{new Random().Next(0, 9)}";
        Input.Category = "Normal Member"; // or "Merchant"
        Input.Country = "USA";
        Input.Password = "Qwe123!";
        Input.VerifyPassword = "Qwe123!";
    }
}
