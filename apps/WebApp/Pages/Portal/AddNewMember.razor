@page "/AddNewMember"

@using System.ComponentModel.DataAnnotations
@using ExpenseTracker.Core.Domain.Authorization
@using ExpenseTracker.Extensions.Common
@inject NavigationManager Nav
@inject UserService UserService

<h3 style="margin-left:2%">@L["Add New Member"]</h3>
<div class="d-flex justify-content-start">
    <div style="width:50%; margin-left:5%;">

        <EditForm Model="Input" OnValidSubmit="AddMember">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success">
                    @_successMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">
                    @_errorMessage
                </div>
            }
            <!-- Username -->
            <div class="mb-2 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Username"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.Username" class="form-control" placeholder=@L["Enter your username"] />
            </div>
            <ValidationMessage For="() => Input.Username" class="text-danger " style="margin-left:25% " />

            <!-- Full Name -->
            <div class="mb-2 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Full Name"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.FullName" class="form-control" placeholder=@L["Enter your full name"] />
            </div>
            <ValidationMessage For="() => Input.FullName" class="text-danger " style="margin-left:25% " />

            <!-- Email -->
            <div class="mb-2 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Email"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.Email" type="email" class="form-control" placeholder=@L["Enter your email"] />
            </div>
            <ValidationMessage For="() => Input.Email" class="text-danger " style="margin-left:25% " />

            <!-- Mobile No -->
            <div class="mb-2 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Mobile No"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.MobileNo" class="form-control" placeholder=@L["Enter your mobile number"] />
            </div>
            <ValidationMessage For="() => Input.MobileNo" class="text-danger " style="margin-left:25% " />
            <!-- Category -->
            <div class="form-group row align-items-center">
                <label class="col-md-3 col-form-label">@L["Category"]: <span class="text-danger">*</span></label>
                <div class="col-md-9 d-flex">
                    <div class="form-check me-4">
                        <input type="radio" id="merchant" name="category" value="Merchant"
                        class="form-check-input"
                        checked="@((Input.Category ?? "") == "Merchant")"
                        @onclick='() => Input.Category = "Merchant"' />
                        <label for="merchant" class="form-check-label">@L["Merchant"]</label>
                    </div>

                    <div class="form-check">
                        <input type="radio" id="normalMember" name="category" value="Normal Member"
                        class="form-check-input"
                        checked="@((Input.Category ?? "") == "Normal Member")"
                        @onclick='() => Input.Category = "Normal Member"' />
                        <label for="normalMember" class="form-check-label">@L["Normal Member"]</label>
                    </div>
                </div>
            </div>







            <!-- Country Dropdown -->
            <div class="form-group row mb-3">
                <label class="col-md-3 col-form-label" for="countryDropdown">@L["Country"]: <span class="text-danger">*</span></label>
                <div class="col-sm-9 mt-1">
                    <select id="countryDropdown" class="form-control" @bind="Input.Country">
                        @foreach (var country in Countries)
                        {
                            <option value="@country">@country</option>
                        }
                    </select>
                </div>
            </div>
            <ValidationMessage For="() => Input.Country" class="text-danger " style="margin-left:25% " />

            <!-- Password -->
            <div class="mb-2 d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Password"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.Password" type="password" class="form-control"
                placeholder=@L["Enter your password"] />
            </div>
            <ValidationMessage For="() => Input.Password" class="text-danger " style="margin-left:25% " />
            <!-- Verify Password -->
            <div class="mb- d-flex align-items-center">
                <label class="col-md-3 col-form-label">@L["Verify Password"]: <span class="text-danger">*</span></label>
                <InputText @bind-Value="Input.VerifyPassword" type="password" class="form-control"
                placeholder=@L["Verify your password"] />
            </div>
            <ValidationMessage For="() => Input.VerifyPassword" class="text-danger " style="margin-left:25% " />
            <!-- Buttons -->
            <div class="d-flex justify-content-between">
                <button class="btn btn-secondary" type="button" @onclick="Cancel">@L["Cancel"]</button>
                <button class="btn btn-primary" type="submit">@L["Add New Member"]</button>
            </div>
        </EditForm>
    </div>
</div>

@* <div class="d-flex justify-content-between">
    <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
    <button class="btn btn-info" type="button" @onclick="GenerateSampleData">Generate Sample Data</button>
    <button class="btn btn-primary" type="submit">Add New Member</button>
</div> *@

@code {
    private InputModel Input { get; set; } = new();
    private string? _errorMessage; // To display errors
    private string? _successMessage; // To display success messages
    private List<string> Countries = new List<string>();

    private void InitializeCountries()
    {
        Countries = new List<string>
        {
            L["USA"],
            L["Malaysia"],
            L["China"],
            L["India"],
            L["United Kingdom"],
            L["Canada"],
            L["Australia"],
            L["France"],
            L["Germany"],
            L["Japan"],
        };
    }
    protected override void OnInitialized()
    {
        InitializeCountries();
    }

    private async Task AddMember()
    {
        try
        {
            // Create the new user object
            var newUser = new User
                {
                    UserName = Input.Username,
                    FullName = Input.FullName,
                    Email = Input.Email,
                    MobileNo = Input.MobileNo,
                    Category = Input.Category,
                    Country = Input.Country,
                    PasswordHash = Input.Password,
                    Status = "Active"
                };

            // Call the service to create the user
            var result = await UserService.CreateUserAsync(newUser, Input.Password);

            // Check the result
            if (result.IsSuccess)
            {         
                _errorMessage = null;
                // Optionally reset the form
                Input = new InputModel();
                NavigationManager.NavigateTo("/MemberList");
                ToastService.Notify(new(ToastType.Success, $"✨{newUser.UserName}✨ {L["Added"]}"));


            }
            else
            {
                _errorMessage = string.Join(", ", result.Errors); // Combine all error messages
                _successMessage = null;
            }
        }
        catch (Exception ex)
        {
            // Log the exception and set a generic error message
            Console.WriteLine($"Error while adding member: {ex.Message}");
            _errorMessage = "An unexpected error occurred. Please try again later.";
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/MemberList");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "UsernameRequired")]
        public string Username { get; set; } = "";

        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "FullNameRequired")]
        public string FullName { get; set; } = "";

        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "EmailRequired")]
        [EmailAddress(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "InvalidEmail")]
        public string Email { get; set; } = "";

        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "PasswordRequired")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "MobileNoRequired")]
        [Phone(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "InvalidMobileNo")]
        public string MobileNo { get; set; } = "";

        [Required(ErrorMessage = "Please select a category")]
        public string Category { get; set; } = "Normal Member";

        [Required(ErrorMessage = "Please select a country")]
        public string Country { get; set; } = "USA";

        [Required(ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "VerifyPassword")]
        [Compare("Password", ErrorMessageResourceType = typeof(Strings), ErrorMessageResourceName = "PasswordsNotMatch")]
        [DataType(DataType.Password)]
        public string VerifyPassword { get; set; } = "";
    }

    private void GenerateSampleData()
    {
        Input.Username = $"User{new Random().Next(1000, 9999)}";
        Input.FullName = "John Doe";
        Input.Email = $"john.doe{new Random().Next(1, 100)}@example.com";
        Input.MobileNo = $"012345678{new Random().Next(0, 9)}";
        Input.Category = "Normal Member"; // or "Merchant"
        Input.Country = "USA";
        Input.Password = "Qwe123!";
        Input.VerifyPassword = "Qwe123!";
    }
}
